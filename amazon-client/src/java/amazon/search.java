package amazon;

import jason.asSemantics.*;
import jason.asSyntax.*;

import com.amazon.soap.*;

/**
 * Internal action that uses JAX-RPC to make a search at Amazon WebService
 * (stubs are generated by Axis)
 * 
 * <p>This IA uses my personal password for Amazon WS: OONTVENGM75.
 * You should get yours at 
 *     http://associates.amazon.com/exec/panama/associates/join/developer/application.html/ref=ac_blrb/002-7871765-8352848
 *
 * @author Jomi
 */
public class search extends DefaultInternalAction {

    AmazonSearchBindingStub binding = null;
    
   /**
     * args[0] is the key to be searched (as StringTerm)
     * args[1] is the list of results
    */
    @Override
    public Object execute(TransitionSystem ts, Unifier un, Term[] args) throws Exception {

        // setup proxy
        //System.setProperty("http.proxyHost", "SOAPscopeMachine");
        //System.setProperty("http.proxyPort", "5049");

    	try {
            if (binding == null) {
                binding = (AmazonSearchBindingStub) new AmazonSearchServiceLocator().getAmazonSearchPort();
            }
            StringTerm key = (StringTerm)args[0];

            // ask WebService for a search
            KeywordRequest request = new KeywordRequest(key.getString(),"1","books","DOONTVENGM75","lite","DOONTVENGM75","","","BR");
            ProductInfo pinfo = binding.keywordSearchRequest(request);

            // copy the result into a list
            ListTerm lt = new ListTermImpl();
            Details[] details = pinfo.getDetails();
            for(int i=0; i<details.length; i++) {
                // create a structure for the book
                Literal book = new Literal("book");
       		    book.addTerm(new StringTermImpl(details[i].getProductName()));
                
                // get all authors
       		    String[] authors = details[i].getAuthors();
       	        ListTerm la = new ListTermImpl();
				if (authors != null) {
       		        for (int a=0; a<authors.length; a++) {
       	                la.add(new StringTermImpl(authors[a]));
        	        }
				}
       	        book.addTerm(la);
                
                // get the price
                String price = details[i].getListPrice();
                if (price.startsWith("$")) price = price.substring(1);
                try {
                    book.addTerm(new NumberTermImpl(Double.parseDouble(price)));
                } catch (Exception e) {
                    book.addTerm(new StringTermImpl(price));
                }
        	    lt.add(book);
            }
            return un.unifies(args[1], lt);
        } catch (Exception jre) {
            jre.printStackTrace();
        }
        return false;
    }
}
